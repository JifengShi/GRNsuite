# -*- snakemake -*-
configfile: "parameters.yaml"  # Read directly from parameters.yaml

import glob
import os

def get_samples():
    if config["process_mode"] == "all":
        # Get all txt files from data directory
        files = glob.glob("data/*.txt")
        # Strip path and extension
        return [os.path.splitext(os.path.basename(f))[0] for f in files]
    else:
        # Use selected samples from config
        return config["selected_samples"]

# Get samples based on mode
SAMPLES = get_samples()

rule all:
    input:
        expand("results/{sample}/detected_spikes.csv",
               sample=SAMPLES),
        expand("results/{sample}/waveforms.csv",
               sample=SAMPLES)

rule process_raw_data:
    input:
        "data/{sample}.txt",
        "parameters.yaml"
    output:
        "results/{sample}/processed_data.csv"
    params:
        param_file = "parameters.yaml",
        output_dir = lambda wildcards: f"results/{wildcards.sample}"
    log:
        "logs/process_raw_data_{sample}.log"
    run:
        from grnsuite.preprocessing import load_and_process_data
        from grnsuite.utils import parse_filename_metadata
        
        # Parse metadata
        metadata = parse_filename_metadata(wildcards.sample, config)
        
        try:
            load_and_process_data(
                input[0],
                params.output_dir,
                param_file=params.param_file,
                metadata=metadata  # Pass metadata to processing function
            )
        except Exception as e:
            print(f"Error: {str(e)}")
            raise

rule detect_spikes:
    input:
        "results/{sample}/processed_data.csv",
        "parameters.yaml"
    output:
        spikes="results/{sample}/detected_spikes.csv",
        waveforms="results/{sample}/waveforms.csv"
    params:
        param_file = "parameters.yaml",
        output_dir = lambda wildcards: f"results/{wildcards.sample}"
    run:
        from grnsuite.spike_detection import detect_and_save_spikes
        detect_and_save_spikes(
            input[0],
            params.output_dir,
            param_file=params.param_file
        )
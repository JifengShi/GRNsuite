# -*- snakemake -*-
configfile: "parameters.yaml"  # Read directly from parameters.yaml

import os
import glob
import pandas as pd
from grnsuite.preprocessing import load_and_process_data, save_metadata
from grnsuite.spike_detection import schmidt_trigger_auto, extract_waveforms
from grnsuite.spike_sorting import sort_spikes, plot_sorting_results, plot_clustering_summary, plot_sorted_spikes

# Automatically find all .txt files in data directory
DATA_DIR = "data"
RECORDINGS = []
for file in glob.glob(os.path.join(DATA_DIR, "*.txt")):
    recording_id = os.path.basename(file).replace(".txt", "")
    RECORDINGS.append(recording_id)

rule all:
    input:
        expand("results/{recording}/sorted_spikes.csv",
               recording=RECORDINGS)

rule save_metadata:
    input:
        data="data/{recording}.txt",
        params="parameters.yaml"
    output:
        metadata="results/{recording}/metadata.json"
    run:
        # Create results directory
        os.makedirs(os.path.dirname(output.metadata), exist_ok=True)
        
        # Save metadata
        save_metadata(
            input.data,
            os.path.dirname(output.metadata),
            config
        )

rule process_data:
    input:
        data="data/{recording}.txt",
        params="parameters.yaml",
        metadata="results/{recording}/metadata.json"  # Add dependency on metadata
    output:
        processed="results/{recording}/processed_data.csv"
    run:
        # Load and process data
        load_and_process_data(
            input.data,
            output.processed,
            sampling_rate=config['sampling_rate'],
            filter_high=1000
        )

rule detect_spikes:
    input:
        data="results/{recording}/processed_data.csv",
        params="parameters.yaml"
    output:
        spikes="results/{recording}/detected_spikes.csv"
    run:
        # Detect spikes using schmidt trigger
        schmidt_trigger_auto(
            input.data,
            os.path.dirname(output.spikes),
            config['schmidt_t1'],
            config['schmidt_t2']
        )

rule extract_waveforms:
    input:
        data="results/{recording}/processed_data.csv",
        spikes="results/{recording}/detected_spikes.csv"
    output:
        waveforms="results/{recording}/waveforms.csv"
    run:
        # Extract waveforms
        extract_waveforms(
            input.data,
            input.spikes,
            os.path.dirname(output.waveforms),
            pre_samples=30,  # Can be added to config if needed
            post_samples=30
        )

rule sort_spikes:
    input:
        spikes="results/{recording}/detected_spikes.csv",
        waveforms="results/{recording}/waveforms.csv",
        data="results/{recording}/processed_data.csv"
    output:
        sorted_spikes="results/{recording}/sorted_spikes.csv",
        unit_averages="results/{recording}/unit_averages.csv",
        clustering_summary="results/{recording}/clustering_summary.png",
        sorted_spikes_plot="results/{recording}/sorted_spikes.png",
        unit_waveforms="results/{recording}/unit_waveforms.png"
    run:
        results_dir = os.path.dirname(output.sorted_spikes)
        
        # Sort spikes
        sort_spikes(results_dir)
        
        # Load data for plotting
        waveforms = pd.read_csv(input.waveforms).values
        spikes_df = pd.read_csv(output.sorted_spikes)
        processed_data = pd.read_csv(input.data)
        
        # Reduce dimensions and cluster for plotting
        from grnsuite.spike_sorting import reduce_dimensions, cluster_spikes
        reduced_waveforms = reduce_dimensions(waveforms)
        labels = cluster_spikes(reduced_waveforms)
        
        # Generate plots
        plot_clustering_summary(
            waveforms,
            reduced_waveforms,
            labels,
            save_path=output.clustering_summary
        )
        
        plot_sorted_spikes(
            processed_data,
            spikes_df,
            save_path=output.sorted_spikes_plot
        )
        
        # Plot unit waveforms
        plot_sorting_results(results_dir)